openapi: 3.0.0
info:
  title: My API
  description: API for user registration, verification, login, profile management, pet information, and WebSocket events.
  version: 1.0.0
servers:
  - url: http://localhost:8080

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        description: Registration data signed by the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedDataRegisterData'
      responses:
        '200':
          description: Registration successful, verification code sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user_id:
                    type: string
                    format: uuid
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Phone number already registered"

  /request-verification-code:
    post:
      summary: Request a verification code
      requestBody:
        description: Request verification code data signed by the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedDataRequestVerificationCodeData'
      responses:
        '200':
          description: Verification code sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user_id:
                    type: string
                    format: uuid
        '400':
          description: Invalid request

  /login:
    post:
      summary: Log in a user
      requestBody:
        description: Login data signed by the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedDataLoginData'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user_id:
                    type: string
                    format: uuid
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  expires_at:
                    type: integer
                    description: Unix timestamp when the access token expires
        '400':
          description: Invalid request

  /refresh:
    post:
      summary: Refresh the access token
      requestBody:
        description: Refresh data signed by the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedDataRefreshData'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  access_token:
                    type: string
                  expires_at:
                    type: integer
                    description: Unix timestamp when the access token expires
        '400':
          description: Invalid request

  /logout:
    post:
      summary: Log out a user
      requestBody:
        description: Logout data signed by the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedDataLogoutData'
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request

  /profiles:
    get:
      summary: Get user profiles
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token
        - name: user_ids
          in: query
          required: true
          schema:
            type: string
          description: Comma-separated list of user UUIDs
      responses:
        '200':
          description: Profiles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized request

  /profile:
    post:
      summary: Update user profile
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token
      requestBody:
        description: Profile update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileData'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
                    description: List of updated/created pets with their IDs
        '401':
          description: Unauthorized request

  /delete-account:
    post:
      summary: Delete user account and personal data
      description: Permanently deletes a user account and all associated personal data while preserving conversation history.
      requestBody:
        description: Delete account data signed by the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedDataDeleteUserData'
      responses:
        '200':
          description: Account successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account and all personal data successfully deleted. Conversation history has been preserved."
        '400':
          description: Invalid request
        '404':
          description: User not found
        '500':
          description: Server error during deletion process

  /ws/:
    get:
      summary: WebSocket endpoint for real-time communication
      description: |
        Establishes a WebSocket connection for real-time messaging and updates.
        Messages must follow the WsMessage format with event types:
        - conversations: Get user conversations
        - message: Send a message
        - new_conversation: Create a new conversation
        - conversation_history: Get message history for a conversation
        - subscribe_conversation: Explicitly subscribe to a conversation
        - unsubscribe_conversation: Explicitly unsubscribe from a conversation
        
        The system enforces role-based access control:
        - Clients (pet owners) can create conversations and see only their own conversations
        - Providers (veterinarians/service providers) can only see conversations they've been invited to
        - Users can only send messages in conversations they're part of
        
        Messages are only broadcast to users who are subscribed to the relevant conversation.
        
        For detailed WebSocket API documentation, see docs/websockets.md
      responses:
        '101':
          description: Switching protocols to WebSocket

  /upload-image:
    post:
      summary: Upload an image
      security:
        - bearerAuth: []
      parameters:
        - name: image_type
          in: query
          required: true
          schema:
            type: string
            enum: [profile, pet]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  image_id:
                    type: string
                    format: uuid
                  image_url:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  
  /images:
    get:
      summary: Get images for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: image_type
          in: query
          required: false
          schema:
            type: string
            enum: [profile, pet]
      responses:
        '200':
          description: List of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        phone_number:
          type: string
        public_key:
          type: string
        scope:
          type: string
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        profile_image_url:
          type: string
          nullable: true
        verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Pet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        breed:
          type: string
        sex:
          type: string
        birthday:
          type: string
          format: date-time
        pet_image_url:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        species:
          type: string
          nullable: true
        spayed_neutered:
          type: boolean
          nullable: true
        weight:
          type: integer
          nullable: true

    RefreshToken:
      type: object
      properties:
        token:
          type: string
        user_id:
          type: string
          format: uuid
        issued_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
          nullable: true
        is_revoked:
          type: boolean
        last_used_at:
          type: string
          format: date-time
          nullable: true
        user_agent:
          type: string
          nullable: true

    SignedDataRegisterData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RegisterData'
        signature:
          type: string

    RegisterData:
      type: object
      properties:
        phone_number:
          type: string
        public_key:
          type: string
        timestamp:
          type: string
          format: date-time

    SignedDataRequestVerificationCodeData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RequestVerificationCodeData'
        signature:
          type: string

    RequestVerificationCodeData:
      type: object
      properties:
        phone_number:
          type: string
          description: Phone number associated with the user
        timestamp:
          type: string
          format: date-time

    SignedDataLoginData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LoginData'
        signature:
          type: string

    LoginData:
      type: object
      properties:
        verification_code:
          type: string
        user_id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time

    SignedDataRefreshData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RefreshData'
        signature:
          type: string

    RefreshData:
      type: object
      properties:
        refresh_token:
          type: string
        user_id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time

    SignedDataLogoutData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LogoutData'
        signature:
          type: string

    LogoutData:
      type: object
      properties:
        refresh_token:
          type: string
        user_id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time

    UpdateProfileData:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        profile_image_url:
          type: string
          nullable: true
        pets:
          type: array
          items:
            $ref: '#/components/schemas/PetData'

    PetData:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        breed:
          type: string
          nullable: true
        sex:
          type: string
          nullable: true
        birthday:
          type: string
          format: date-time
          nullable: true
        pet_image_url:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        species:
          type: string
          nullable: true
        spayed_neutered:
          type: boolean
          nullable: true
        weight:
          type: integer
          nullable: true

    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        providers:
          type: array
          items:
            type: string
            format: uuid
        client:
          type: string
          format: uuid
        pet:
          type: string
          format: uuid
        last_message:
          type

    SignedDataDeleteUserData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/DeleteUserData'
        signature:
          type: string

    DeleteUserData:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time

    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        filename:
          type: string
          nullable: true
        content_type:
          type: string
          nullable: true
        image_type:
          type: string
        image_url:
          type: string
        created_at:
          type: integer
          format: int64
        updated_at:
          type: integer
          format: int64

